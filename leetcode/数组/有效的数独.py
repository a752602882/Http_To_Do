class Solution:
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        dic_row = [{},{},{},{},{},{},{},{},{}]
        dic_col = [{},{},{},{},{},{},{},{},{}]
        dic_box = [{},{},{},{},{},{},{},{},{}]

        b_len = len(board)
        for i  in range(9):
            for j in range(9):
                num = board[i][j]
                if num=='.':
                    continue
                if num not in dic_row and num not in  dic_col and num not in  dic_box[(3*(i//3)+(j//3))]:
                    print("(3*(i//3)+(j//3))--->",(3*(i//3)+(j//3)))
                    dic_row[i][num] = 1
                    dic_col[j][num] = 1
                    dic_box[3*(i//3)+(j//3)][num] = 1       # 利用地板除，向下取余。巧妙地将矩阵划分为九块
                else:
                    return False

        return True


if  __name__=='__main__':
    a =[
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
    b =[
        ["8","3","3",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
    print(Solution().isValidSudoku(a))

    #dic_row = [{1:1},{4:1},{3:1},{2:1},{1:1},{},{},{},{}]
    #
    # print(dic_row[0][5])
    # print(dic_row[1])
    # print(dic_row[2])
    # print(5 in dic_row[0] )    字典 5 是和 字典 dic_row[0] key 对比
    # print(1//3)
    # print(2//3)
    # print(3//3)
    # print(4//3)
    # print(5//3)
    # print(6//3)
    # print(7//3)
    # print(8//3)
    # print(9//3)

